/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/webscrapers/testwithconfig/": {
    /** Run an url direct fetching against the best availlable node, with a given DataSourceProperties */
    post: operations["fetchUrlWithConfig"];
  };
  "/webscrapers/fetch/{datasourceName}": {
    /** Run a datasource retrieving against the best availlable node */
    post: operations["triggerFetcher"];
  };
  "/webscrapers/fetch/all": {
    /** Run a all datasources retrieving against best availlables node */
    post: operations["triggerAllFetcher"];
  };
  "/webscrapers/crawl/test/": {
    /** Run an url direct fetching against the best availlable node */
    post: operations["testFetchUrl"];
  };
  "/score/{vertical}": {
    /** Score a specific vertical */
    post: operations["scoreFromName"];
  };
  "/enrich/": {
    /** Enrich a CSV file with open4goods data */
    post: operations["enrich"];
  };
  "/batch/{vertical}": {
    /** Batch a specific vertical */
    post: operations["batchVertical"];
  };
  "/batch/tweak": {
    /** Launch the data cleanup routine, if implemented */
    post: operations["batchCleanup"];
  };
  "/batch/": {
    /** Launch the full batch (scoring, aggregation, completion batch), iso has @Scheduled */
    post: operations["batch"];
  };
  "/backup/xwiki": {
    /** Launch a Xwiki backup */
    post: operations["xwikiBackup"];
  };
  "/backup/products/import": {
    /** Launch a product import */
    post: operations["productsImport"];
  };
  "/backup/products/export": {
    /** Launch a product backup */
    post: operations["productsExport"];
  };
  "/backup/products/export/vertical": {
    /** Launch a product backup, for specified vertical */
    post: operations["productsExport_1"];
  };
  "/feeds": {
    /** Manualy run the indexation of all feeds */
    patch: operations["indexFeeds"];
  };
  "/feedsByUrl": {
    /** List all feeds from catalogs corresponding the given url */
    patch: operations["feedByUrl"];
  };
  "/feedsByKey": {
    /** List all feeds from catalogs corresponding the given field key */
    patch: operations["feedByKey"];
  };
  "/{vertical}/featuregroups/": {
    /** Loads the list of features, aggegated by UiFeatureGroup */
    get: operations["getFeaturesGroup"];
  };
  "/{vertical}/ecoscore/": {
    /** Generate the ecoscore yaml fragment for a given vertical */
    get: operations["generateEcoscoreMappings"];
  };
  "/{vertical}/categories/": {
    /** Generate the categories yaml fragment for a given vertical */
    get: operations["generateCategoryMappingsForExistinf"];
  };
  "/{vertical}/attributes/": {
    /** Generate attributes coverage for a vertical */
    get: operations["generateAttributesCoverage"];
  };
  "/webscrapers": {
    /** List all availlable fetchers and their stats */
    get: operations["fetcherStats"];
  };
  "/webscrapers/{crawlerNodeName}/fetch": {
    /** Get stats for a specific fetcher */
    get: operations["fetcherStats_1"];
  };
  "/webscrapers/stop": {
    /** Stop a fetching job, will request any fetchers */
    get: operations["stopFetching"];
  };
  "/update/{vertical}": {
    /** Update the vertical with attributes, mappings and ecoscore directly in the file ! */
    get: operations["updateVerticalWithAll"];
  };
  "/update/{vertical}/impactscore/": {
    /** Update the categories mapping for a given vertical directly in the file ! */
    get: operations["updateVerticalWithImpactScore"];
  };
  "/update/{vertical}/categories/": {
    /** Update the categories mapping for a given vertical directly in the file ! */
    get: operations["updateVerticalWithMappings"];
  };
  "/update/{vertical}/attributes/": {
    /** Update the suggested attributes for a given vertical directly in the file ! */
    get: operations["updateVerticalWithAttributes"];
  };
  "/score/": {
    /** Score all verticals (sanitisation + launch the scheduled batch that score all verticals) */
    get: operations["scoreVerticals"];
  };
  "/prompt/text": {
    /** Launch prompt */
    get: operations["prompt"];
  };
  "/prompt/json": {
    /** Launch prompt */
    get: operations["promptJson"];
  };
  "/product/bestname": {
    /** Get a product best name */
    get: operations["getBestName"];
  };
  "/product/": {
    /** Get a product from it's GTIN */
    get: operations["get"];
  };
  "/misc/vertical": {
    /** Generate the vertical files. Please, use https://docs.google.com/spreadsheets/d/1AyBdagWbn_rst2xZvUH9dVF7G2y_Wm_Xrq0IxDGkXoc/edit?gid=0#gid=0 */
    get: operations["generateCategoryMappingsFragment"];
  };
  "/feed/queue": {
    /** Show feeds awaiting indexation */
    get: operations["getQueue"];
  };
  "/features/{featuresId}/": {
    /** Loads the Feature for a given id */
    get: operations["getFeature"];
  };
  "/feature/resolve": {
    /** Resolve the icecat features id, and apply the english name if an unconflicted match is found */
    get: operations["getOriginalEnglishName"];
  };
  "/datasources": {
    /** List all availlable datasource configurations */
    get: operations["datasources"];
  };
  "/datasource/{datasourceName}": {
    /** Get a specific datasource configuration */
    get: operations["datasource"];
  };
  "/datasource/{datasourceName}/nextFetchingDate": {
    /** Get a specific datasource configuration */
    get: operations["datasourceNextSchedule"];
  };
  "/completion/resources": {
    /** Launch resource completion on all verticals */
    get: operations["resourceCompletionAll"];
  };
  "/completion/resources/gtin/": {
    /** Launch resource completion on the specified vertical */
    get: operations["resourceCompletionProduct"];
  };
  "/completion/resources/": {
    /** Launch resource completion on the specified vertical */
    get: operations["resourceCompletionVertical"];
  };
  "/completion/icecat": {
    /** Launch icecat completion on all verticals */
    get: operations["icecatCompletionAll"];
  };
  "/completion/icecat/gtin/": {
    /** Launch icecat completion on the specified vertical */
    get: operations["icecatCompletionProduct"];
  };
  "/completion/icecat/": {
    /** Launch icecat completion on the specified vertical */
    get: operations["icecatCompletionVertical"];
  };
  "/completion/amazon": {
    /** Launch amazon completion on all verticals */
    get: operations["amazonCompletionAll"];
  };
  "/completion/amazon/gtin/": {
    /** Launch amazon completion on the specified vertical */
    get: operations["amazonCompletionProduct"];
  };
  "/completion/amazon/": {
    /** Launch amazon completion on the specified vertical */
    get: operations["amazonCompletionVertical"];
  };
  "/brands/stats/companies/missing": {
    get: operations["statsMissingCompanies"];
  };
  "/batch/request": {
    /** Launch batch review generation */
    get: operations["batchReview"];
  };
  "/batch/processresponse": {
    /** Process and retrieve batch job response by jobId */
    get: operations["processResponse"];
  };
  "/batch/processResponse": {
    /** Process the response for a given jobId */
    get: operations["trigger"];
  };
  "/batch/checkStatus": {
    /** Check batch job status by jobId */
    get: operations["checkStatus"];
  };
  "/aggregate/verticals": {
    /** Launch aggregation of all verticals */
    get: operations["sanitizeAllVertical"];
  };
  "/aggregate/verticals/{vertical}": {
    /** Launch aggregation of a specific vertical */
    get: operations["sanitizeSpecificVertical"];
  };
  "/aggregate/products": {
    /** Launch aggregation of all products */
    get: operations["sanitize"];
  };
  "/aggregate/gtin/{gtin}": {
    /** Launch sanitisation of a given products */
    get: operations["sanitizeOne"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: never;
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export interface operations {

  /** Run an url direct fetching against the best availlable node, with a given DataSourceProperties */
  fetchUrlWithConfig: {
    parameters: {
      query: {
        url: string;
      };
    };
    requestBody: {
      content: {
        "application/json": string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["DataFragment"];
        };
      };
    };
  };
  /** Run a datasource retrieving against the best availlable node */
  triggerFetcher: {
    parameters: {
      path: {
        datasourceName: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["FetchRequestResponse"];
        };
      };
    };
  };
  /** Run a all datasources retrieving against best availlables node */
  triggerAllFetcher: {
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["FetchRequestResponse"];
        };
      };
    };
  };
  /** Run an url direct fetching against the best availlable node */
  testFetchUrl: {
    requestBody: {
      content: {
        "application/json": string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["DataFragment"];
        };
      };
    };
  };
  /** Score a specific vertical */
  scoreFromName: {
    parameters: {
      path: {
        vertical: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: never;
      };
    };
  };
  /** Enrich a CSV file with open4goods data */
  enrich: {
    parameters: {
      query?: {
        /** @description Facets that will be rendered */
        facets?: ("TITLE" | "GTIN_INFOS" | "DATES" | "BRAND" | "MODEL" | "GOOGLE_TAXONOMY" | "CATEGORIES" | "IMAGES" | "PRICES" | "PRICE_HISTORY" | "RAW_ATTRIBUTES" | "CLASSIFIED_ATTRIBUTES")[];
        /** @description Name of the csv header that points the GTIN */
        gtinField?: string;
        /** @description Name of the csv header that points the title. A gtin resolution will be prefered if availlable */
        titleField?: string;
        /** @description CSV Schema is autodetected, but you can force here the csv quote char */
        csvQuoteChar?: string;
        /** @description CSV Schema is autodetected, but you can force here the csv column separator */
        csvColumnSeparatorChar?: string;
        /** @description CSV Schema is autodetected, but you can force here the csv escape char */
        csvEscapeChar?: string;
        /** @description Input CSV file Encoding */
        inputEncoding?: string;
      };
    };
    requestBody?: {
      content: {
        "multipart/form-data": {
          /**
           * Format: binary
           * @description Input CSV File to be enriched
           */
          file: string;
        };
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: never;
      };
    };
  };
  /** Batch a specific vertical */
  batchVertical: {
    parameters: {
      path: {
        vertical: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: never;
      };
    };
  };
  /** Launch the data cleanup routine, if implemented */
  batchCleanup: {
    responses: {
      /** @description OK */
      200: {
        content: never;
      };
    };
  };
  /** Launch the full batch (scoring, aggregation, completion batch), iso has @Scheduled */
  batch: {
    responses: {
      /** @description OK */
      200: {
        content: never;
      };
    };
  };
  /** Launch a Xwiki backup */
  xwikiBackup: {
    responses: {
      /** @description OK */
      200: {
        content: never;
      };
    };
  };
  /** Launch a product import */
  productsImport: {
    responses: {
      /** @description OK */
      200: {
        content: never;
      };
    };
  };
  /** Launch a product backup */
  productsExport: {
    responses: {
      /** @description OK */
      200: {
        content: never;
      };
    };
  };
  /** Launch a product backup, for specified vertical */
  productsExport_1: {
    parameters: {
      query: {
        vertical: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: never;
      };
    };
  };
  /** Manualy run the indexation of all feeds */
  indexFeeds: {
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["IndexationResponse"];
        };
      };
    };
  };
  /** List all feeds from catalogs corresponding the given url */
  feedByUrl: {
    parameters: {
      query: {
        url: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: never;
      };
    };
  };
  /** List all feeds from catalogs corresponding the given field key */
  feedByKey: {
    parameters: {
      query: {
        feedKey: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: never;
      };
    };
  };
  /** Loads the list of features, aggegated by UiFeatureGroup */
  getFeaturesGroup: {
    parameters: {
      path: {
        vertical: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": {
            [key: string]: string;
          };
        };
      };
    };
  };
  /** Generate the ecoscore yaml fragment for a given vertical */
  generateEcoscoreMappings: {
    parameters: {
      path: {
        vertical: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  /** Generate the categories yaml fragment for a given vertical */
  generateCategoryMappingsForExistinf: {
    parameters: {
      query?: {
        minOffersCount?: number;
      };
      path: {
        vertical: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  /** Generate attributes coverage for a vertical */
  generateAttributesCoverage: {
    parameters: {
      path: {
        vertical: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["VerticalAttributesStats"];
        };
      };
    };
  };
  /** List all availlable fetchers and their stats */
  fetcherStats: {
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": {
            [key: string]: components["schemas"]["FetcherGlobalStats"];
          };
        };
      };
    };
  };
  /** Get stats for a specific fetcher */
  fetcherStats_1: {
    parameters: {
      path: {
        crawlerNodeName: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["FetcherGlobalStats"];
        };
      };
    };
  };
  /** Stop a fetching job, will request any fetchers */
  stopFetching: {
    parameters: {
      query: {
        provider: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: never;
      };
    };
  };
  /** Update the vertical with attributes, mappings and ecoscore directly in the file ! */
  updateVerticalWithAll: {
    parameters: {
      path: {
        vertical: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: never;
      };
    };
  };
  /** Update the categories mapping for a given vertical directly in the file ! */
  updateVerticalWithImpactScore: {
    parameters: {
      path: {
        vertical: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: never;
      };
    };
  };
  /** Update the categories mapping for a given vertical directly in the file ! */
  updateVerticalWithMappings: {
    parameters: {
      query?: {
        minOffers?: number;
      };
      path: {
        vertical: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: never;
      };
    };
  };
  /** Update the suggested attributes for a given vertical directly in the file ! */
  updateVerticalWithAttributes: {
    parameters: {
      query?: {
        minCoverage?: number;
        containing?: string;
      };
      path: {
        vertical: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: never;
      };
    };
  };
  /** Score all verticals (sanitisation + launch the scheduled batch that score all verticals) */
  scoreVerticals: {
    responses: {
      /** @description OK */
      200: {
        content: never;
      };
    };
  };
  /** Launch prompt */
  prompt: {
    parameters: {
      query: {
        key?: string;
        context: {
          [key: string]: Record<string, never>;
        };
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  /** Launch prompt */
  promptJson: {
    parameters: {
      query: {
        key?: string;
        context: {
          [key: string]: Record<string, never>;
        };
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": {
            [key: string]: Record<string, never>;
          };
        };
      };
    };
  };
  /** Get a product best name */
  getBestName: {
    parameters: {
      query: {
        gtin: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": string;
        };
      };
    };
  };
  /** Get a product from it's GTIN */
  get: {
    parameters: {
      query: {
        gtin: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["Product"];
        };
      };
    };
  };
  /** Generate the vertical files. Please, use https://docs.google.com/spreadsheets/d/1AyBdagWbn_rst2xZvUH9dVF7G2y_Wm_Xrq0IxDGkXoc/edit?gid=0#gid=0 */
  generateCategoryMappingsFragment: {
    parameters: {
      query: {
        googleTaxonomyId: string;
        matchingCategories: string;
        urlPrefix: string;
        h1Prefix: string;
        verticalHomeUrl: string;
        verticalHomeTitle: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: never;
      };
    };
  };
  /** Show feeds awaiting indexation */
  getQueue: {
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": Record<string, never>[];
        };
      };
    };
  };
  /** Loads the Feature for a given id */
  getFeature: {
    parameters: {
      path: {
        featuresId: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["IcecatFeature"];
        };
      };
    };
  };
  /** Resolve the icecat features id, and apply the english name if an unconflicted match is found */
  getOriginalEnglishName: {
    parameters: {
      query: {
        name: string;
        vertical: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  /** List all availlable datasource configurations */
  datasources: {
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": {
            [key: string]: components["schemas"]["DataSourceProperties"];
          };
        };
      };
    };
  };
  /** Get a specific datasource configuration */
  datasource: {
    parameters: {
      path: {
        datasourceName: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["DataSourceProperties"];
        };
      };
    };
  };
  /** Get a specific datasource configuration */
  datasourceNextSchedule: {
    parameters: {
      path: {
        datasourceName: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  /** Launch resource completion on all verticals */
  resourceCompletionAll: {
    responses: {
      /** @description OK */
      200: {
        content: never;
      };
    };
  };
  /** Launch resource completion on the specified vertical */
  resourceCompletionProduct: {
    parameters: {
      query: {
        gtin: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: never;
      };
    };
  };
  /** Launch resource completion on the specified vertical */
  resourceCompletionVertical: {
    parameters: {
      query: {
        verticalConfig: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: never;
      };
    };
  };
  /** Launch icecat completion on all verticals */
  icecatCompletionAll: {
    responses: {
      /** @description OK */
      200: {
        content: never;
      };
    };
  };
  /** Launch icecat completion on the specified vertical */
  icecatCompletionProduct: {
    parameters: {
      query: {
        gtin: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: never;
      };
    };
  };
  /** Launch icecat completion on the specified vertical */
  icecatCompletionVertical: {
    parameters: {
      query: {
        verticalConfig: string;
        max: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: never;
      };
    };
  };
  /** Launch amazon completion on all verticals */
  amazonCompletionAll: {
    responses: {
      /** @description OK */
      200: {
        content: never;
      };
    };
  };
  /** Launch amazon completion on the specified vertical */
  amazonCompletionProduct: {
    parameters: {
      query: {
        gtin: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: never;
      };
    };
  };
  /** Launch amazon completion on the specified vertical */
  amazonCompletionVertical: {
    parameters: {
      query: {
        verticalConfig: string;
        max: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: never;
      };
    };
  };
  statsMissingCompanies: {
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": string[];
        };
      };
    };
  };
  /** Launch batch review generation */
  batchReview: {
    parameters: {
      query?: {
        vertical?: string;
        numberOfProducts?: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  /** Process and retrieve batch job response by jobId */
  processResponse: {
    responses: {
      /** @description OK */
      200: {
        content: never;
      };
    };
  };
  /** Process the response for a given jobId */
  trigger: {
    parameters: {
      query: {
        jobId: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: never;
      };
    };
  };
  /** Check batch job status by jobId */
  checkStatus: {
    parameters: {
      query: {
        jobId: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["BatchJobResponse"];
        };
      };
    };
  };
  /** Launch aggregation of all verticals */
  sanitizeAllVertical: {
    responses: {
      /** @description OK */
      200: {
        content: never;
      };
    };
  };
  /** Launch aggregation of a specific vertical */
  sanitizeSpecificVertical: {
    parameters: {
      path: {
        vertical: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: never;
      };
    };
  };
  /** Launch aggregation of all products */
  sanitize: {
    responses: {
      /** @description OK */
      200: {
        content: never;
      };
    };
  };
  /** Launch sanitisation of a given products */
  sanitizeOne: {
    parameters: {
      path: {
        gtin: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: never;
      };
    };
  };
}
